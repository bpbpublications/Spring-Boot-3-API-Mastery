spring.application.name=order-service
server.port=8081
spring.threads.virtual.enabled=true
spring.datasource.url=jdbc:postgresql://localhost:5432/easyshopdb_order
spring.datasource.username=user
spring.datasource.password=password

order.service.catalogservice-url=http://localhost:8080/products
order.service.product-client-type=grpc
order.service.shipment-service-url=http://localhost:8083/shipments

#logging.level.org.springframework.jdbc.core=TRACE
logging.level.org.springframework.web.servlet=TRACE
spring.mvc.log-request-details=true

grpc.client.productProtoService.address=static://localhost:9090
grpc.client.productProtoService.negotiation-type=plaintext

spring.cloud.function.definition=handleShipmentEvent
spring.cloud.stream.default-binder=kafka
spring.cloud.stream.kafka.binder.brokers=localhost:9092
spring.cloud.stream.kafka.binder.consumer-properties.max.poll.records=250
#spring.cloud.stream.kafka.bindings.handleShipmentEvent-in-0.consumer.enable-dlq=true
#spring.cloud.stream.kafka.bindings.handleShipmentEvent-in-0.consumer.dlq-name=shipment_event_topic_dlq
spring.cloud.stream.bindings.handleShipmentEvent-in-0.destination=shipment_event_topic
spring.cloud.stream.bindings.handleShipmentEvent-in-0.group=${spring.application.name}
spring.cloud.stream.bindings.handleShipmentEvent-in-0.consumer.max-attempts=3
spring.cloud.stream.bindings.handleShipmentEvent-in-0.consumer.back-off-initial-interval=1000
spring.cloud.stream.bindings.handleShipmentEvent-in-0.consumer.back-off-multiplier=2.0
spring.cloud.stream.bindings.handleShipmentEvent-in-0.error-handler-definition=handleShipmentEventError
